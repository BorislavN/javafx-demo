The problem I was facing - after creating a jar with IntelliJs "Add Artifact" - I was getting an exception while trying to run it
The javafx components where missing...

Solution 1:
Create jars with IntelliJ "Add Artifact" Menu
Selecting the Application class as the entry point of the application
Choose "Add library jars to output directory and link in manifest" option
This option adds the jars of our dependencies in the same folder
This way we can add the javafx "javafx.controls,javafx.fxml" to the module path when running the application
Example: java --module-path "folder_with_jars" --add-modules javafx.controls,javafx.fxml -jar "TheMainApplication.jar"

Solution 2:
Create a Launcher class, which has a main method calling the ChatApplication main method
Change the entry point of the program to the Launcher class in the pom
Select the Launcher class as the entry point of the application
Create a jar using IntelliJs "Add Artifact" Menu, don't use "Add library jars to output directory and link in manifest" option
Run the jar, you will get a warning about inappropriate configuration, but the app will still run

Solution 3:
Use the javafx:jlink plugin as by the "https://openjfx.io/openjfx-docs/#modular" documentation
After executing the command in the target folder you will find a launcher to execute the app
The launcher name is set in the pom "<jlinkImageName>app</jlinkImageName>"

Solution 4:
After creating a jar as in "Solution 1", you can use "jpackage" to create an exe
Example: jpackage --type "app-image" --module-path "folder_with_jars" --module your.module/package.names.MainClass --dest ./chat
In the "chat" folder you will find an exe